name: "publish"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "ubuntu-24.04-arm"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install NSIS (Windows)
        if: matrix.platform == 'windows-latest'
        run: choco install nsis -y

      - name: install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version from tauri.conf.json
        id: version
        shell: bash
        run: |
          VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build & Draft Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: .
          tagName: v${{ steps.version.outputs.version }}
          releaseName: "Ferrix v${{ steps.version.outputs.version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - name: List built files (debug)
        run: |
          echo "==== Bundle tree ===="
          ls -R src-tauri/target/release/bundle || true

      - name: Upload artifacts (fallback)
        uses: actions/upload-artifact@v4
        with:
          name: ferrix-${{ matrix.platform }}-${{ github.run_number }}
          path: |
            src-tauri/target/release/bundle/**
